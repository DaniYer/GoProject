package middlewares

import (
	"compress/gzip"
	"io"
	"net/http"
	"strings"
)

// gzipWriter ‚Äî –≤—Ä–∞–ø–ø–µ—Ä –Ω–∞–¥ http.ResponseWriter,
// –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ Write, —á—Ç–æ–±—ã —Å–∂–∏–º–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.
type gzipWriter struct {
	http.ResponseWriter
	Writer *gzip.Writer
}

// Write ‚Äî –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ gzip.Writer,
// –∞ –Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ ResponseWriter.
func (w gzipWriter) Write(b []byte) (int, error) {
	return w.Writer.Write(b)
}

// GzipHandle ‚Äî middleware, –∫–æ—Ç–æ—Ä—ã–π:
// 1. –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ gzip-–∑–∞–ø—Ä–æ—Å—ã.
// 2. –°–∂–∏–º–∞–µ—Ç –∏—Å—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç gzip.
func GzipHandle(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {

		// –ï—Å–ª–∏ –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –≤ gzip ‚Äî —Ä–∞–∑–∂–∏–º–∞–µ–º —Ç–µ–ª–æ
		if r.Header.Get("Content-Encoding") == "gzip" {
			gz, err := gzip.NewReader(r.Body)
			if err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}
			r.Body = io.NopCloser(gz)
		}

		// –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç gzip ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥–∞—ë–º –∫–∞–∫ –µ—Å—Ç—å
		if !strings.Contains(r.Header.Get("Accept-Encoding"), "gzip") {
			next.ServeHTTP(w, r)
			return
		}

		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
		w.Header().Set("Content-Encoding", "gzip")         // –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ —Ç–µ–ª–æ —Å–∂–∞—Ç–æ
		w.Header().Set("Content-Type", "application/json") // üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ: –æ—Ç–¥–∞—ë–º JSON –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

		// –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º ResponseWriter –≤ gzip.Writer
		gz := gzip.NewWriter(w)
		defer gz.Close()

		// –ü–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
		// —Å –ø–æ–¥–º–µ–Ω—ë–Ω–Ω—ã–º writer, —á—Ç–æ–±—ã –æ–Ω –ø–∏—Å–∞–ª –≤ —Å–∂–∞—Ç—ã–π –ø–æ—Ç–æ–∫.
		next.ServeHTTP(gzipWriter{ResponseWriter: w, Writer: gz}, r)
	})
}
